# NyXX/encephalon/economy/monetization.py

import random
from NyXX.utils.logging import log_info, log_error

class Monetization:
    """
    The Monetization class defines the revenue generation strategies for the NyXX system
    and the individual agents. This includes transactional fees, premium services, and
    value exchange mechanisms that allow agents to earn and the system to generate revenue.
    """

    def __init__(self, system_fee_rate=0.05, premium_service_fee=100):
        """
        Initialize the monetization strategy for the system.
        :param system_fee_rate: The percentage of each transaction that the system takes as a fee.
        :param premium_service_fee: Fee for agents who opt for premium services.
        """
        self.system_fee_rate = system_fee_rate  # Fee rate for transactions (5%)
        self.premium_service_fee = premium_service_fee  # Fee for premium services
        self.total_system_revenue = 0  # Total revenue generated by the system (e.g., transaction fees)

    def charge_transaction_fee(self, agent, transaction_amount):
        """
        Charge a transaction fee to the agent for performing a transaction.
        :param agent: The agent performing the transaction.
        :param transaction_amount: The amount of the transaction.
        :return: The fee charged and the agent's updated balance.
        """
        fee = transaction_amount * self.system_fee_rate
        agent.update_balance(-fee)
        self.total_system_revenue += fee
        log_info(f"Transaction fee of {fee} charged to Agent {agent.agent_id}. System revenue: {self.total_system_revenue}.")
        return fee

    def provide_premium_service(self, agent):
        """
        Offer a premium service to an agent for a fee.
        :param agent: The agent requesting premium services.
        :return: Success or failure of the premium service offer.
        """
        if agent.get_balance() >= self.premium_service_fee:
            agent.update_balance(-self.premium_service_fee)
            log_info(f"Premium service granted to Agent {agent.agent_id} for {self.premium_service_fee}.")
            return True
        else:
            log_error(f"Agent {agent.agent_id} does not have enough funds for premium service.")
            return False

    def exchange_value(self, buyer_agent, seller_agent, value, asset_name):
        """
        Facilitate a value exchange between two agents. The system takes a small fee.
        :param buyer_agent: The agent purchasing the value.
        :param seller_agent: The agent selling the value.
        :param value: The value being exchanged (could be money, knowledge, etc.).
        :param asset_name: The asset or service being exchanged.
        :return: None
        """
        exchange_value = value * (1 - self.system_fee_rate)
        buyer_agent.update_balance(-value)
        seller_agent.update_balance(exchange_value)
        self.total_system_revenue += value * self.system_fee_rate
        log_info(f"Value exchange of {value} completed between Agent {buyer_agent.agent_id} and Agent {seller_agent.agent_id} for {asset_name}. System revenue: {self.total_system_revenue}.")

    def generate_system_revenue(self):
        """
        Return the total revenue generated by the system.
        :return: Total system revenue.
        """
        return self.total_system_revenue

    def incentivize_performance(self, agent, performance_metric):
        """
        Incentivize agents based on their performance (e.g., completed tasks, successful trades).
        :param agent: The agent receiving the incentive.
        :param performance_metric: The performance metric determining the reward (e.g., number of successful trades).
        :return: None
        """
        incentive = performance_metric * random.randint(10, 50)  # Randomized incentive based on performance
        agent.update_balance(incentive)
        log_info(f"Agent {agent.agent_id} incentivized with {incentive} based on performance metric: {performance_metric}.")
